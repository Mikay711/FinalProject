par(mfrow = c(2, 3))
plot(model_election, which = 6)
# Reset the plotting layout
par(mfrow = c(1, 1))
model_election <- lm(Buchanan ~ Bush, data = florida)
# Plot diagnostic plots
par(mfrow = c(2, 3))
plot(model_election, which = 1:6)
model_election <- lm(Buchanan ~ Bush, data = florida)
# Plot diagnostic plots
par(mfrow = c(2, 3))
plot(model_election, which = 6)
model_election <- lm(Buchanan ~ Bush, data = florida)
# Plot diagnostic plots
par(mfrow = c(2, 3))
plot(model_election, which = 1:6)
# Take the log of both variables
florida$log_Bush <- log(florida$Bush)
florida$log_Buchanan <- log(florida$Buchanan)
# Run the regression model with log-transformed variables
model_election_log <- lm(log_Buchanan ~ log_Bush, data = florida)
# Plot diagnostic plots
par(mfrow = c(2, 3))
plot(model_election_log, which = 1:6)
library(readr)
NY_House_Dataset <- read_csv("Graduate School/DACSS Visualization/codesForDrafts/NY-House-Dataset.csv")
View(NY_House_Dataset)
library(raster)
library(sf)
library(ggplot2)
library(dplyr)
library(tidyr)
library(scales)
library(reshape2)
library(raster)
library(sf)
str(mydata,width = 70,strict.width='cut')
# clean memory ------------------------------------------------------------
rm(list = ls())
filename="NY-House-Dataset.csv"
mydata=read.csv(filename)
setwd("~/Graduate School/DACSS Visualization/codesForDrafts")
filename="NY-House-Dataset.csv"
mydata=read.csv(filename)
head(mydata)
str(mydata)
# Replace inconsistent representations
mydata$TYPE <- gsub(" for Sale", " for sale", mydata$TYPE, ignore.case = TRUE)
# Remove specified categories from the "TYPE" variable in the dataset
mydata <- mydata[!(mydata$TYPE %in% c("Coming Soon", "For sale", "Pending", "Contingent")), ]
# Remove specified categories from the "TYPE" variable in the dataset
mydata <- mydata[!(mydata$TYPE %in% c("Coming Soon", "For sale", "Pending", "Contingent")), ]
mydata <- mydata%>%filter(PRICE <= 50000000)
library(ggplot2)
library(dplyr)
library(tidyr)
library(scales)
library(reshape2)
library(raster)
library(sf)
str(mydata,width = 70,strict.width='cut')
# Create a leaflet map
map <- leaflet() %>%
setView(lng = -74, lat = 40.7, zoom = 10)  # Set the initial view to New York City
library(leaflet)
# Create a leaflet map
map <- leaflet() %>%
setView(lng = -74, lat = 40.7, zoom = 10)  # Set the initial view to New York City
# Add markers for each property
for (i in 1:nrow(mydata)) {
map <- addMarkers(map,
lng = mydata$LONGITUDE[i],
lat = mydata$LATITUDE[i],
popup = paste("Address: ", mydata$ADDRESS[i], "<br>",
"Price: $", mydata$PRICE[i]))
}
# Create a table to display additional information
property_table <- DT::datatable(mydata[, c("ADDRESS", "BEDS", "BATH", "PROPERTYSQFT")],
options = list(paging = FALSE, searching = FALSE))
# Combine the map and table
layout <- fluidRow(
column(width = 8, map),
column(width = 4, property_table)
)
# Create a leaflet map
map <- leaflet() %>%
setView(lng = -74, lat = 40.7, zoom = 10)  # Set the initial view to New York City
# Add markers for each property
for (i in 1:nrow(mydata)) {
map <- addMarkers(map,
lng = mydata$LONGITUDE[i],
lat = mydata$LATITUDE[i],
popup = paste("Address: ", mydata$ADDRESS[i], "<br>",
"Price: $", mydata$PRICE[i], "<br>",
"Beds: ", mydata$BEDS[i], "<br>",
"Baths: ", mydata$BATH[i], "<br>",
"Property Sqft: ", mydata$PROPERTYSQFT[i]))
}
# Display the map
map
# Display the map
map
# Add markers for each property
for (i in 1:nrow(mydata)) {
map <- addMarkers(map,
lng = mydata$LONGITUDE[i],
lat = mydata$LATITUDE[i]
)
}
# Create a leaflet map
map <- leaflet() %>%
setView(lng = -74, lat = 40.7, zoom = 10)  # Set the initial view to New York City
# Add markers for each property
for (i in 1:nrow(mydata)) {
map <- addMarkers(map,
lng = mydata$LONGITUDE[i],
lat = mydata$LATITUDE[i]
)
}
# Display the map
map
library(ggmap)
install.packages("ggmap")
library(ggmap)
# Fetch map of New York City
nyc <- get_map(location = "New York City", zoom = 10, maptype = "roadmap")
# Install and load necessary packages
install.packages("maps")
library(maps)
# Plot map of New York City
map("county", "new york", col = "lightgray", fill = TRUE, bg = "white")
map("state", "new york", col = "black", fill = FALSE, add = TRUE)
# Plot map of New York City
map("county", "new york", col = "lightgray", fill = TRUE, bg = "white")
map("state", "new york", col = "black", fill = FALSE, add = TRUE)
# clean memory ------------------------------------------------------------
rm(list = ls())
filename="NY-House-Dataset.csv"
mydata=read.csv(filename)
# Replace inconsistent representations
mydata$TYPE <- gsub(" for Sale", " for sale", mydata$TYPE, ignore.case = TRUE)
# Remove specified categories from the "TYPE" variable in the dataset
mydata <- mydata[!(mydata$TYPE %in% c("Coming Soon", "For sale", "Pending", "Contingent")), ]
mydata <- mydata%>%filter(PRICE <= 50000000)
library(ggplot2)
library(dplyr)
library(tidyr)
library(scales)
library(reshape2)
library(maps)
# Plot map of New York City
map("county", "new york", col = "lightgray", fill = TRUE, bg = "white")
map("state", "new york", col = "black", fill = FALSE, add = TRUE)
# Plot map of New York City
map("county", "new york", col = "lightgray", fill = TRUE, bg = "white")
map("state", "new york", col = "black", fill = FALSE, add = TRUE)
map("state", "new york", col = "black", fill = FALSE, add = TRUE)
# Load shapefile data for New York City counties
nyc_counties <- map_data("county", region = "new york")
# Plot map of New York City counties
ggplot() +
geom_polygon(data = nyc_counties, aes(x = long, y = lat, group = group),
fill = "lightgray", color = "black") +
coord_fixed() +
theme_void()
# Plot map of New York City
map("county", "new york", col = "lightgray", fill = TRUE, bg = "white")
map("state", "new york", col = "black", fill = FALSE, add = TRUE)
# Plot map of New York City
nyc_counties< -map("county", "new york", col = "lightgray", fill = TRUE, bg = "white")
# Plot map of New York City
nyc_counties<- map("county", "new york", col = "lightgray", fill = TRUE, bg = "white")
# Plot map of New York City counties
ggplot() +
geom_polygon(data = nyc_counties, aes(x = long, y = lat, group = group),
fill = "lightgray", color = "black") +
coord_fixed() +
theme_void()
# Plot map of New York City
nyc_counties<- map("county", "new york", col = "lightgray", fill = TRUE, bg = "white")
library(maps)
library(maps)
# Retrieve map data for New York City counties
nyc_map <- map("county", "new york", plot = FALSE)
# Plot the map
map("county", "new york", col = "lightgray", fill = TRUE, bg = "white")
map("state", "new york", col = "black", fill = FALSE, add = TRUE)
# Save the map data as an object
nyc_map
View(nyc_map)
# Retrieve map data for New York City counties
nyc_map <- map("county", "new york")
# Plot the map
map("county", "new york", col = "lightgray", fill = TRUE, bg = "white")
# Save the map data as an object
nyc_map
# Save the map data as an object
nyc_map
# Retrieve map data for New York City counties
nyc_map <- map("county", "new york")
# Save the map data as an object
nyc_map
View(nyc_map)
plot = FALSE
# Retrieve map data for New York City counties
nyc_map <- map("county", "new york", plot = FALSE)
View(nyc_map)
View(mydata)
# Retrieve map data for New York City counties
nyc_map <- map("county", "new york", plot = FALSE)
# Plot the map
map("county", "new york", col = "lightgray", fill = TRUE, bg = "white")
map("state", "new york", col = "black", fill = FALSE, add = TRUE)
# Plot latitude and longitude points from your dataframe
points(mydata$LONGITUDE, mydata$LATITUDE, col = "red", pch = 20)
# Add legend
legend("topright", legend = "Data Points", col = "red", pch = 20)
# Retrieve map data for New York City counties
nyc_map <- map("county", "new york", plot = FALSE)
# Define the boundaries for New York City
nyc_bounds <- c(-74.3, -73.7, 40.4, 40.9)  # [xmin, xmax, ymin, ymax]
# Plot the map focusing on New York City
map("county", "new york", col = "lightgray", fill = TRUE, bg = "white", xlim = nyc_bounds[1:2], ylim = nyc_bounds[3:4])
map("state", "new york", col = "black", fill = FALSE, add = TRUE)
# Plot latitude and longitude points from your dataframe
points(mydata$LONGITUDE, mydata$LATITUDE, col = "red", pch = 20)
# Add legend
legend("topright", legend = "Data Points", col = "red", pch = 20)
# Define the boundaries for New York City
nyc_bounds <- c(-74.3, -73.7, 40.4, 40.9)  # [xmin, xmax, ymin, ymax]
# Retrieve map data for New York City counties
nyc_map <- map("county", "new york", plot = FALSE)
# Define the boundaries based on the minimum and maximum latitude and longitude values from your dataframe
map_bounds <- c(min(mydata$LONGITUDE), max(mydata$LONGITUDE), min(mydata$LATITUDE), max(mydata$LATITUDE))
# Plot the map focusing on the boundaries from your dataframe
map("county", "new york", col = "lightgray", fill = TRUE, bg = "white", xlim = map_bounds[1:2], ylim = map_bounds[3:4])
map("state", "new york", col = "black", fill = FALSE, add = TRUE)
# Plot the map focusing on the boundaries from your dataframe
map("county", "new york", col = "lightgray", fill = TRUE, bg = "white", xlim = map_bounds[1:2], ylim = map_bounds[3:4])
# Plot the map focusing on the boundaries from your dataframe
map("county", "new york", col = "lightgray", fill = TRUE, bg = "white", xlim = map_bounds[1:2], ylim = map_bounds[3:4])
# Plot latitude and longitude points from your dataframe
points(mydata$LONGITUDE, mydata$LATITUDE, col = "red", pch = 20)
# Add legend
legend("topright", legend = "Data Points", col = "red", pch = 20)
# Plot latitude and longitude points from your dataframe
points(mydata$LONGITUDE, mydata$LATITUDE, col = "red", pch = 20)
# Plot latitude and longitude points from your dataframe
points(mydata$LONGITUDE, mydata$LATITUDE, col = "red", pch = 2)
# Plot latitude and longitude points from your dataframe
points(mydata$LONGITUDE, mydata$LATITUDE, col = "red", pch = 20)
# Retrieve map data for New York City counties
nyc_map <- map("county", "new york", plot = FALSE)
# Define the boundaries based on the minimum and maximum latitude and longitude values from your dataframe
map_bounds <- c(min(mydata$LONGITUDE), max(mydata$LONGITUDE), min(mydata$LATITUDE), max(mydata$LATITUDE))
# Plot the map focusing on the boundaries from your dataframe
map("county", "new york", col = "lightgray", fill = TRUE, bg = "white", xlim = map_bounds[1:2], ylim = map_bounds[3:4])
# Plot latitude and longitude points from your dataframe
points(mydata$LONGITUDE, mydata$LATITUDE, col = "red", pch = 20)
# Plot the map focusing on the boundaries from your dataframe
map("county", "new york", col = "lightgray", fill = TRUE, bg = "white", xlim = map_bounds[1:2], ylim = map_bounds[3:4])
# Load necessary packages
library(maps)
# Retrieve map data for New York City counties
nyc_map <- map("county", "new york", plot = FALSE)
# Define the boundaries based on the minimum and maximum latitude and longitude values from your dataframe
map_bounds <- c(min(mydata$LONGITUDE), max(mydata$LONGITUDE), min(mydata$LATITUDE), max(mydata$LATITUDE))
# Plot the map focusing on the boundaries from your dataframe
map("county", "new york", col = "lightgray", fill = TRUE, bg = "white", xlim = map_bounds[1:2], ylim = map_bounds[3:4])
# Plot latitude and longitude points from your dataframe
points(mydata$LONGITUDE, mydata$LATITUDE, col = "red", pch = 20)
# Replace inconsistent representations
mydata$TYPE <- gsub(" for Sale", " for sale", mydata$TYPE, ignore.case = TRUE)
# Remove specified categories from the "TYPE" variable in the dataset
mydata <- mydata[!(mydata$TYPE %in% c("Coming Soon", "For sale", "Pending", "Contingent")), ]
mydata <- mydata%>%filter(PRICE <= 50000000)
# Filter data points for houses and condos
filtered_data <- mydata[mydata$TYPE %in% c("House for sale", "Condo for sale"), ]
# Retrieve map data for New York City counties
nyc_map <- map("county", "new york", plot = FALSE)
# Define the boundaries based on the filtered data
map_bounds <- c(min(filtered_data$LONGITUDE), max(filtered_data$LONGITUDE), min(filtered_data$LATITUDE), max(filtered_data$LATITUDE))
# Plot the map focusing on the boundaries from the filtered data
map("county", "new york", col = "lightgray", fill = TRUE, bg = "white", xlim = map_bounds[1:2], ylim = map_bounds[3:4])
# Plot latitude and longitude points for houses and condos
points(filtered_data$LONGITUDE, filtered_data$LATITUDE, col = "red", pch = 20)
# Load necessary packages
library(maps)
# Filter data points for houses and condos
houses <- mydata[mydata$TYPE == "House for sale", ]
condos <- mydata[mydata$TYPE == "Condo for sale", ]
# Retrieve map data for New York City counties
nyc_map <- map("county", "new york", plot = FALSE)
# Define the boundaries based on the filtered data
map_bounds <- c(min(mydata$LONGITUDE), max(mydata$LONGITUDE), min(mydata$LATITUDE), max(mydata$LATITUDE))
# Plot the map focusing on the boundaries from the filtered data
map("county", "new york", col = "lightgray", fill = TRUE, bg = "white", xlim = map_bounds[1:2], ylim = map_bounds[3:4])
# Plot latitude and longitude points for houses and condos in different colors
points(houses$LONGITUDE, houses$LATITUDE, col = "blue", pch = 20)
points(condos$LONGITUDE, condos$LATITUDE, col = "red", pch = 20)
# Add legend
legend("topright", legend = c("Houses", "Condos"), col = c("blue", "red"), pch = 20)
# Load necessary packages
library(maps)
# Filter data points for houses and condos
houses <- mydata[mydata$TYPE == "House for sale", ]
condos <- mydata[mydata$TYPE == "Condo for sale", ]
# Retrieve map data for New York City counties
nyc_counties <- map("county", "new york", plot = FALSE)
# Retrieve map data for New York City boroughs
nyc_boroughs <- map("borough", col = "transparent", fill = TRUE)
# Define the boundaries based on the filtered data
map_bounds <- c(min(mydata$LONGITUDE), max(mydata$LONGITUDE), min(mydata$LATITUDE), max(mydata$LATITUDE))
# Plot the map focusing on the boundaries from the filtered data
map("county", "new york", col = "lightgray", fill = TRUE, bg = "white", xlim = map_bounds[1:2], ylim = map_bounds[3:4])
map("borough", col = "transparent", fill = TRUE, add = TRUE)
# Plot latitude and longitude points for houses and condos in different colors
points(houses$LONGITUDE, houses$LATITUDE, col = "blue", pch = 20)
points(condos$LONGITUDE, condos$LATITUDE, col = "red", pch = 20)
# Add legend
legend("topright", legend = c("Houses", "Condos"), col = c("blue", "red"), pch = 20)
map("borough", col = "transparent", fill = TRUE, add = TRUE)
# Retrieve map data for New York City boroughs
nyc_boroughs <- map("borough", col = "transparent", fill = TRUE)
# Filter data points for houses and condos
houses <- mydata[mydata$TYPE == "House for sale", ]
condos <- mydata[mydata$TYPE == "Condo for sale", ]
# Retrieve map data for New York City counties
nyc_counties <- map("county", "new york", plot = FALSE)
# Retrieve map data for New York City boroughs
nyc_boroughs <- map("borough", col = "transparent", fill = TRUE)
install.packages("rnyc")
# Load necessary packages
library(rnyc)
install.packages("tigris")
# Load necessary packages
library(tigris)
# Load necessary packages
library(tigris)
library(ggplot2)
# Filter data points for houses and condos
houses <- mydata[mydata$TYPE == "House for sale", ]
condos <- mydata[mydata$TYPE == "Condo for sale", ]
# Retrieve NYC borough boundary data
nyc_boroughs <- tigris::boroughs()
# Retrieve NYC borough boundary data
nyc_boroughs <- tigris::boroughs()
# Load necessary package
library(sf)
# Set the directory where the shapefile is located
shapefile_dir <- "C:\Users\micha\OneDrive\Documents\Graduate School\DACSS Visualization\codesForDrafts\geo_export_b71e9963-c97c-4975-8733-7f354c528159.shp"
# Set the directory where the shapefile is located
shapefile_dir <- "\Users\micha\OneDrive\Documents\Graduate School\DACSS Visualization\codesForDrafts\geo_export_b71e9963-c97c-4975-8733-7f354c528159.shp"
# Set the directory where the shapefile is located
shapefile_dir <- "/Users/micha/OneDrive/Documents/Graduate School/DACSS Visualization/codesForDrafts/geo_export_b71e9963-c97c-4975-8733-7f354c528159.shp"
# Read the shapefile
boroughs_sf <- st_read(dsn = shapefile_dir)
# Check the structure of the imported shapefile
print(boroughs_sf)
# Load necessary packages
library(ggplot2)
# Plot borough boundaries
ggplot() +
geom_sf(data = boroughs_sf, fill = NA, color = "black") + # Add borough boundaries
geom_point(data = houses, aes(x = LONGITUDE, y = LATITUDE), color = "blue", size = 2) + # Add houses
geom_point(data = condos, aes(x = LONGITUDE, y = LATITUDE), color = "red", size = 2) + # Add condos
labs(title = "NYC Housing Data with Borough Boundaries") +
theme_minimal()
# Plot borough boundaries
ggplot() +
geom_sf(data = boroughs_sf, fill = NA, color = "black") + # Add borough boundaries
geom_point(data = houses, aes(x = LONGITUDE, y = LATITUDE), color = "blue", size = .1) + # Add houses
geom_point(data = condos, aes(x = LONGITUDE, y = LATITUDE), color = "red", size = .1) + # Add condos
labs(title = "NYC Housing Data with Borough Boundaries") +
theme_minimal()
# Plot borough boundaries
ggplot() +
geom_sf(data = boroughs_sf, fill = NA, color = "black") + # Add borough boundaries
geom_point(data = houses, aes(x = LONGITUDE, y = LATITUDE), color = "blue", size = .1) + # Add houses
geom_point(data = condos, aes(x = LONGITUDE, y = LATITUDE), color = "red", size = .1) + # Add condos
labs(title = "Location of Houses and Condos for Sale inNYC") +
theme_minimal()
# Plot borough boundaries
ggplot() +
geom_sf(data = boroughs_sf, fill = NA, color = "black") + # Add borough boundaries
geom_point(data = houses, aes(x = LONGITUDE, y = LATITUDE), color = "blue", size = .3) + # Add houses
geom_point(data = condos, aes(x = LONGITUDE, y = LATITUDE), color = "red", size = .3) + # Add condos
labs(title = "Location of Houses and Condos for Sale inNYC") +
theme_minimal()
# Plot borough boundaries
ggplot() +
geom_sf(data = boroughs_sf, fill = NA, color = "black") + # Add borough boundaries
geom_point(data = houses, aes(x = LONGITUDE, y = LATITUDE), color = "blue", size = .3) + # Add houses
geom_point(data = condos, aes(x = LONGITUDE, y = LATITUDE), color = "red", size = .3) + # Add condos
labs(title = "Location of Houses and Condos for Sale inNYC")
# Plot borough boundaries
ggplot() +
geom_sf(data = boroughs_sf, fill = NA, color = "black") + # Add borough boundaries
geom_point(data = houses, aes(x = LONGITUDE, y = LATITUDE), color = "blue", size = .3) + # Add houses
geom_point(data = condos, aes(x = LONGITUDE, y = LATITUDE), color = "red", size = .3) + # Add condos
labs(title = "Location of Houses and Condos for Sale in NYC") +
theme_minimal()
# Plot borough boundaries and housing data
ggplot() +
geom_sf(data = boroughs_sf, fill = NA, color = "black") + # Add borough boundaries
geom_point(data = houses, aes(x = LONGITUDE, y = LATITUDE), color = "blue", size = 0.3) + # Add houses
geom_point(data = condos, aes(x = LONGITUDE, y = LATITUDE), color = "red", size = 0.3) + # Add condos
labs(title = "Location of Houses and Condos for Sale in NYC") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.text.y = element_blank(), # Remove axis labels
axis.title.x = element_blank(), axis.title.y = element_blank(), # Remove axis titles
legend.position = "bottom") + # Change legend position
scale_color_manual(name = "Property Type", values = c("blue", "red"), labels = c("Houses", "Condos")) # Add legend
# Plot borough boundaries
ggplot() +
geom_sf(data = boroughs_sf, fill = NA, color = "black") + # Add borough boundaries
geom_point(data = houses, aes(x = LONGITUDE, y = LATITUDE), color = "blue", size = .3) + # Add houses
geom_point(data = condos, aes(x = LONGITUDE, y = LATITUDE), color = "red", size = .3) + # Add condos
labs(title = "Location of Houses and Condos for Sale in NYC") +
theme_minimal()
ggplot() +
geom_sf(data = boroughs_sf, fill = NA, color = "black") + # Add borough boundaries
geom_point(data = houses, aes(x = LONGITUDE, y = LATITUDE, color = "Houses"), size = 0.3) + # Add houses
geom_point(data = condos, aes(x = LONGITUDE, y = LATITUDE, color = "Condos"), size = 0.3) + # Add condos
labs(title = "Location of Houses and Condos for Sale in NYC") +
theme_minimal() +
theme(axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10), # Adjust axis text size
legend.position = "bottom") + # Change legend position
scale_color_manual(name = "Property Type", values = c("Houses" = "blue", "Condos" = "red")) # Add legend
axis.text.x?
?axis.text.x
?theme()
# Plot borough boundaries and housing data
ggplot() +
geom_sf(data = boroughs_sf, fill = NA, color = "black") + # Add borough boundaries
geom_point(data = houses, aes(x = LONGITUDE, y = LATITUDE, color = "Houses"), size = 0.3) + # Add houses
geom_point(data = condos, aes(x = LONGITUDE, y = LATITUDE, color = "Condos"), size = 0.3) + # Add condos
labs(title = "Location of Houses and Condos for Sale in NYC") +
theme_minimal() +
theme(axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10), # Adjust axis text size
axis.title.x = element_blank(), axis.title.y = element_blank(), # Remove axis titles
axis.text = element_blank(), # Remove axis labels
legend.position = "bottom") + # Change legend position
scale_color_manual(name = "Property Type", values = c("Houses" = "blue", "Condos" = "red")) # Add legend
?legend.position
?theme()
# Plot borough boundaries and housing data
ggplot() +
geom_sf(data = boroughs_sf, fill = NA, color = "black") + # Add borough boundaries
geom_point(data = houses, aes(x = LONGITUDE, y = LATITUDE, color = "Houses"), size = 0.3) + # Add houses
geom_point(data = condos, aes(x = LONGITUDE, y = LATITUDE, color = "Condos"), size = 0.3) + # Add condos
labs(title = "Location of Houses and Condos for Sale in NYC") +
theme_minimal() +
theme(axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10), # Adjust axis text size
axis.title.x = element_blank(), axis.title.y = element_blank(), # Remove axis titles
axis.text = element_blank(), # Remove axis labels
legend.position = "right") + # Change legend position
scale_color_manual(name = "Property Type", values = c("Houses" = "blue", "Condos" = "red")) # Add legend
# Plot borough boundaries and housing data
ggplot() +
geom_sf(data = boroughs_sf, fill = NA, color = "black") + # Add borough boundaries
geom_point(data = houses, aes(x = LONGITUDE, y = LATITUDE, color = "Houses"), size = 0.3) + # Add houses
geom_point(data = condos, aes(x = LONGITUDE, y = LATITUDE, color = "Condos"), size = 0.3) + # Add condos
labs(title = "Location of Houses and Condos for Sale in NYC") +
theme_minimal() +
theme(axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10), # Adjust axis text size
axis.title.x = element_blank(), axis.title.y = element_blank(), # Remove axis titles
axis.text = element_blank(), # Remove axis labels
legend.position = "bottom") + # Change legend position
scale_color_manual(name = "Property Type", values = c("Houses" = "blue", "Condos" = "red")) # Add legend
# Plot borough boundaries and housing data
ggplot() +
geom_sf(data = boroughs_sf, fill = NA, color = "black") + # Add borough boundaries
geom_point(data = houses, aes(x = LONGITUDE, y = LATITUDE, color = "Houses"), size = 0.3) + # Add houses
geom_point(data = condos, aes(x = LONGITUDE, y = LATITUDE, color = "Condos"), size = 0.3) + # Add condos
labs(title = "Location of Houses and Condos for Sale in NYC") +
theme_minimal() +
theme(axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10), # Adjust axis text size
axis.title.x = element_blank(), axis.title.y = element_blank(), # Remove axis titles
legend.position = "bottom") + # Change legend position
scale_color_manual(name = "Property Type", values = c("Houses" = "blue", "Condos" = "red")) + # Add legend
guides(color = guide_legend(override.aes = list(size = 4))) # Adjust legend dot size
base4 <- ggplot() + geom_sf(data = boroughs_sf, fill = NA, color = "black")
plot4 <- base4 +
geom_point(data = houses, aes(x = LONGITUDE, y = LATITUDE, color = "Houses"), size = 0.3) + # Add houses
geom_point(data = condos, aes(x = LONGITUDE, y = LATITUDE, color = "Condos"), size = 0.3) + # Add condos
labs(title = "Location of Houses and Condos for Sale in NYC") +
theme_minimal() +
theme(axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10), # Adjust axis text size
axis.title.x = element_blank(), axis.title.y = element_blank(), # Remove axis titles
legend.position = "bottom") + # Change legend position
scale_color_manual(name = "Property Type", values = c("Houses" = "blue", "Condos" = "red")) + # Add legend
guides(color = guide_legend(override.aes = list(size = 4))) # Adjust legend dot size
base4 <- ggplot() + geom_sf(data = boroughs_sf, fill = NA, color = "black")
plot4 <- base4 +
geom_point(data = houses, aes(x = LONGITUDE, y = LATITUDE, color = "Houses"), size = 0.3) + # Add houses
geom_point(data = condos, aes(x = LONGITUDE, y = LATITUDE, color = "Condos"), size = 0.3) + # Add condos
labs(title = "Location of Houses and Condos for Sale in NYC") +
theme_minimal() +
theme(axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10), # Adjust axis text size
axis.title.x = element_blank(), axis.title.y = element_blank(), # Remove axis titles
legend.position = "bottom") + # Change legend position
scale_color_manual(name = "Property Type", values = c("Houses" = "blue", "Condos" = "red")) + # Add legend
guides(color = guide_legend(override.aes = list(size = 4))) # Adjust legend dot size
plot4
# save del4Draft ----------------------------------------------------------
saveRDS(plott4, file = "graph_draft.rds")
# save del4Draft ----------------------------------------------------------
saveRDS(plot4, file = "graph_draft.rds")
library(flexdashboard) # always
readRDS("~/Graduate School/DACSS Visualization/codesForDrafts/graph_draft.rds")
setwd("~/Graduate School/DACSS Visualization/FinalProject")
